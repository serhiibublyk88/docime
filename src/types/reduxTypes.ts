
/// **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**
export interface User {
  _id: string;
  username: string;
  email?: string;
  role: number;
  token?: string;
}

/// **–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏**
export interface AuthState {
  user: User | null;
}

export interface BasicGroup {
  id: string;
  name: string;
}

/// **–ì—Ä—É–ø–ø–∞**
export interface Group {
  id: string;
  name: string;
  description?: string;
  members: User[];
  createdBy: string;
  createdAt: string;
  groupsForCarousel?: { id: string; name: string }[];
  membersCount?: number;
}

/// **–≠–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—É—Å–µ–ª–∏ –≥—Ä—É–ø–ø**
export interface GroupCarouselItem {
  id: string;
  name: string;
}

/// **–°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –≥—Ä—É–ø–ø**
export interface GroupsState {
  groups: Group[];
}

/// **–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã**
export interface GroupState {
  group: Group | null;
  members: User[];
  groupsForCarousel: { id: string; name: string }[];
  isLoading: boolean;
  error: string | null;
}

/// **–¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞**
export type QuestionType = "single" | "multiple" | "number" | "text";

/// **–û—Ç–≤–µ—Ç**
export interface Answer {
  id: string;
  text: string;
  score: number;
}

/// **–í–æ–ø—Ä–æ—Å**
export interface Question {
  id: string;
  text: string;
  type: QuestionType;
  image?: File | string; // –§–∞–π–ª (–ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ) –∏–ª–∏ URL-—Å—Ç—Ä–æ–∫–∞ (–ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏)
  answers: Answer[];
  percentageError?: number; // üîπ –î–ª—è TEXT_INPUT (–ø–æ –±—ç–∫—É)
}

/// **–°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤**
export interface QuestionsState {
  questions: Question[];
  loading: boolean;
  error: string | null;
  selectedQuestion?: Question | null; // üîπ –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
}

/// **–¢–µ—Å—Ç**
export interface Test {
  id: string;
  title: string;
  description: string;
  author: { id: string; username: string };
  timeLimit: number;
  availableForGroups: { id: string; name: string }[];
  questions: Question[];
  maximumMarks: number;
  status: "active" | "inactive";
  minimumScores: Record<number, number>;
  createdAt: string;
}
export interface AnswerPayload {
  text: string;
  score: number;
  isCorrect?: boolean; // –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è —Ç–∏–ø–æ–≤ 'text' –∏ 'numeric'
}

export interface QuestionPayload {
  questionText: string;
  questionType: "single" | "multiple" | "number" | "text";
  imageUrl?: string | null;
  percentageError?: number; // —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö
  answers: AnswerPayload[];
}

export interface TestPayload {
  title: string;
  description: string;
  timeLimit: number;
  availableForGroups?: string[]; // —Å–ø–∏—Å–æ–∫ ID –≥—Ä—É–ø–ø
  questions: QuestionPayload[]; // —Ç–µ–ø–µ—Ä—å —ç—Ç–æ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
  maximumMarks: number;
  status: "active" | "inactive";
  minimumScores: Record<number, number>;
  author?: string;
}


/// **–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤**
export interface TestsState {
  tests: Test[];
  currentTest: Test | null;
  loading: boolean;
  error: string | null;
  allGroups: { id: string; name: string }[];
}

export interface TestState {
  tests: Test[];
  selectedTest: Test | null;
  loading: boolean;
  error: string | null;
}

/// **–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞**
export interface TestResult {
  id: string;
  testId: string;
  userId: string;
  score: number;
  maxScore: number;
  percentage: number;
  grade: number;
  startTime: string | null;
  finishTime: string | null;
  timeTaken: number;
}

/// **–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤**
export interface ResultState {
  results: TestResult[];
}

/// **–û—Ç–≤–µ—Ç –æ—Ç API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã**
export interface GroupResponse {
  groupDetails: Group;
  groupsForCarousel: { id: string; name: string }[];
  members: User[];
}

/// **–û—Ç–≤–µ—Ç –æ—Ç API –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**
export interface UpdatedUserResponse {
  _id: string;
  username?: string;
  email?: string;
  role?: number;
}

/// **–¢–∏–ø—ã —ç–∫—à–µ–Ω–æ–≤ Redux –¥–ª—è —Ç–µ—Å—Ç–æ–≤**
export enum TestsActionTypes {
  FETCH_TESTS_REQUEST = "tests/fetchTestsRequest",
  FETCH_TESTS_SUCCESS = "tests/fetchTestsSuccess",
  FETCH_TESTS_FAILURE = "tests/fetchTestsFailure",

  CREATE_TEST_SUCCESS = "tests/createTestSuccess",
  UPDATE_TEST_SUCCESS = "tests/updateTestSuccess",
  DELETE_TEST_SUCCESS = "tests/deleteTestSuccess",
  COPY_TEST_SUCCESS = "tests/copyTestSuccess",

  UPDATE_TEST_GROUPS_SUCCESS = "tests/updateTestGroupsSuccess",
}

/// **–¢–∏–ø—ã —ç–∫—à–µ–Ω–æ–≤ Redux –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤**
export enum QuestionsActionTypes {
  FETCH_QUESTIONS_REQUEST = "questions/fetchQuestionsRequest",
  FETCH_QUESTIONS_SUCCESS = "questions/fetchQuestionsSuccess",
  FETCH_QUESTIONS_FAILURE = "questions/fetchQuestionsFailure",

  CREATE_QUESTION_SUCCESS = "questions/createQuestionSuccess",
  UPDATE_QUESTION_SUCCESS = "questions/updateQuestionSuccess",
  DELETE_QUESTION_SUCCESS = "questions/deleteQuestionSuccess",

  ADD_ANSWER_SUCCESS = "questions/addAnswerSuccess",
  UPDATE_ANSWER_SUCCESS = "questions/updateAnswerSuccess",
  DELETE_ANSWER_SUCCESS = "questions/deleteAnswerSuccess",
}
