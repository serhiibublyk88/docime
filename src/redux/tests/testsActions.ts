import { createAsyncThunk } from "@reduxjs/toolkit";
import { Test } from "../../types/reduxTypes";
import {
  fetchTestsApi,
  fetchGroupsApi,
  fetchAllGroupsApi,
  createTestApi,
  updateTestApi,
  deleteTestApi,
  copyTestApi,
  updateTestGroupsApi,
} from "../../services/testsApi";
import { AxiosError } from "axios";

// ‚úÖ **–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫**
const handleApiError = (error: unknown): string => {
  if (error instanceof AxiosError) {
    console.error("‚ùå [API Error]:", error.response?.data || error.message);
    return error.response?.data?.message || "Fehler beim Abrufen der Tests";
  }
  return "Unbekannter Fehler beim Abrufen der Tests";
};

// ‚úÖ **–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤**
export const fetchTests = createAsyncThunk<
  Test[],
  void,
  { rejectValue: string }
>("tests/fetchTests", async (_, { rejectWithValue }) => {
  try {
    console.log("üì° [THUNK] –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤...");
    const tests = await fetchTestsApi();
    console.log("‚úÖ [THUNK] –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–µ—Å—Ç—ã:", tests);
    return tests;
  } catch (error) {
    return rejectWithValue(handleApiError(error));
  }
});

// ‚úÖ **–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –≤ —Å–∏—Å—Ç–µ–º–µ**
export const fetchAllGroups = createAsyncThunk<
  { id: string; name: string }[],
  void,
  { rejectValue: string }
>("tests/fetchAllGroups", async (_, { rejectWithValue }) => {
  try {
    console.log("üì° [THUNK] –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã...");
    const groups = await fetchAllGroupsApi();
    console.log("‚úÖ [THUNK] –ó–∞–≥—Ä—É–∂–µ–Ω—ã –≤—Å–µ –≥—Ä—É–ø–ø—ã:", groups);
    return groups;
  } catch (error) {
    return rejectWithValue(handleApiError(error));
  }
});

// ‚úÖ **–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è —Ç–µ—Å—Ç–∞**
export const fetchTestGroups = createAsyncThunk<
  { id: string; name: string }[],
  string,
  { rejectValue: string }
>("tests/fetchTestGroups", async (testId, { rejectWithValue }) => {
  try {
    console.log(`üì° [THUNK] –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è —Ç–µ—Å—Ç–∞ ${testId}...`);
    const groups = await fetchGroupsApi(testId);
    console.log("‚úÖ [THUNK] –ó–∞–≥—Ä—É–∂–µ–Ω—ã –≥—Ä—É–ø–ø—ã:", groups);
    return groups;
  } catch (error) {
    return rejectWithValue(handleApiError(error));
  }
});

// ‚úÖ **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞**
export const createTest = createAsyncThunk<
  Test,
  Partial<Test>,
  { rejectValue: string }
>("tests/createTest", async (testData, { rejectWithValue }) => {
  try {
    console.log("üì° [THUNK] –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç...", testData);
    const newTest = await createTestApi(testData);
    console.log("‚úÖ [THUNK] –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω:", newTest);
    return newTest;
  } catch (error) {
    return rejectWithValue(handleApiError(error));
  }
});

// ‚úÖ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞**
export const updateTest = createAsyncThunk<
  Test,
  { testId: string; data: Partial<Test> },
  { rejectValue: string }
>("tests/updateTest", async ({ testId, data }, { rejectWithValue }) => {
  try {
    console.log(`üì° [THUNK] –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Å—Ç ${testId}...`, data);
    const updatedTest = await updateTestApi(testId, data);
    console.log(`‚úÖ [THUNK] –¢–µ—Å—Ç ${testId} –æ–±–Ω–æ–≤–ª–µ–Ω:`, updatedTest);
    return updatedTest;
  } catch (error) {
    return rejectWithValue(handleApiError(error));
  }
});

// ‚úÖ **–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞**
export const deleteTest = createAsyncThunk<
  string,
  string,
  { rejectValue: string }
>("tests/deleteTest", async (testId, { rejectWithValue }) => {
  try {
    console.log(`üì° [THUNK] –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç ${testId}...`);
    await deleteTestApi(testId);
    console.log(`‚úÖ [THUNK] –¢–µ—Å—Ç ${testId} —É–¥–∞–ª–µ–Ω`);
    return testId;
  } catch (error) {
    return rejectWithValue(handleApiError(error));
  }
});

// ‚úÖ **–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞**
export const copyTest = createAsyncThunk<Test, string, { rejectValue: string }>(
  "tests/copyTest",
  async (testId, { rejectWithValue }) => {
    try {
      console.log(`üì° [THUNK] –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ—Å—Ç ${testId}...`);
      const copiedTest = await copyTestApi(testId);
      console.log(`‚úÖ [THUNK] –¢–µ—Å—Ç ${testId} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω:`, copiedTest);
      return copiedTest;
    } catch (error) {
      return rejectWithValue(handleApiError(error));
    }
  }
);

// ‚úÖ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è —Ç–µ—Å—Ç–∞**
export const updateTestGroups = createAsyncThunk<
  { testId: string; availableForGroups: { id: string; name: string }[] },
  { testId: string; groupId: string; action: "add" | "remove" },
  { rejectValue: string }
>(
  "tests/updateTestGroups",
  async ({ testId, groupId, action }, { rejectWithValue, dispatch }) => {
    try {
      console.log(
        `üì° [THUNK] ${
          action === "add" ? "–î–æ–±–∞–≤–ª—è–µ–º" : "–£–¥–∞–ª—è–µ–º"
        } –≥—Ä—É–ø–ø—É ${groupId} –¥–ª—è —Ç–µ—Å—Ç–∞ ${testId}...`
      );

      const response = await updateTestGroupsApi(testId, groupId, action);

      console.log(
        `‚úÖ [THUNK] –ì—Ä—É–ø–ø—ã —Ç–µ—Å—Ç–∞ ${testId} –æ–±–Ω–æ–≤–ª–µ–Ω—ã:`,
        response.availableForGroups
      );

      // ‚è¨ **–í–∞–∂–Ω–æ! –ó–∞–Ω–æ–≤–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è**
      await dispatch(fetchTestGroups(testId)).unwrap();

      return response;
    } catch (error) {
      console.error(
        `‚ùå [THUNK] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø –¥–ª—è —Ç–µ—Å—Ç–∞ ${testId}:`,
        error
      );
      return rejectWithValue("Fehler beim Aktualisieren der Gruppen");
    }
  }
);
