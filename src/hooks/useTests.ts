import { useEffect, useCallback } from "react";
import { useDispatch, useSelector } from "react-redux";
import {
  AppDispatch,
  fetchTests,
  fetchAllGroups, // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
  createTest,
  updateTest,
  deleteTest,
  copyTest,
  updateTestGroups,
  setCurrentTest,
  selectAllTests,
  selectTestsLoading,
  selectTestsError,
  selectCurrentTest,
  selectAllGroups, // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
} from "../redux";
import { Test } from "../types/reduxTypes";

export const useTests = () => {
  const dispatch = useDispatch<AppDispatch>();

  const tests = useSelector(selectAllTests) || [];
  const allGroups = useSelector(selectAllGroups) || []; // ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –≥—Ä—É–ø–ø
  const loading = useSelector(selectTestsLoading);
  const error = useSelector(selectTestsError);
  const currentTest = useSelector(selectCurrentTest);

  /// üîÑ **–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤ –∏ –≥—Ä—É–ø–ø –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏**
  useEffect(() => {
    if (tests.length === 0) {
      console.warn("Lade Tests...");
      dispatch(fetchTests())
        .unwrap()
        .catch((error) => {
          console.error("Fehler beim Abrufen der Tests:", error);
        });
    }

    if (allGroups.length === 0) {
      console.warn("Lade Gruppen...");
      dispatch(fetchAllGroups())
        .unwrap()
        .catch((error) => {
          console.error("Fehler beim Abrufen der Gruppen:", error);
        });
    }
  }, [dispatch, tests.length, allGroups.length]);

  /// üîÑ **–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤**
  const fetchAllTests = useCallback(() => {
    console.warn("Erzwinge Test-Aktualisierung...");
    dispatch(fetchTests())
      .unwrap()
      .catch((error) => {
        console.error("Fehler beim Abrufen der Tests:", error);
      });
  }, [dispatch]);

  /// üîÑ **–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø**
  const fetchGroups = useCallback(() => {
    console.warn("Erzwinge Gruppen-Aktualisierung...");
    dispatch(fetchAllGroups())
      .unwrap()
      .catch((error) => {
        console.error("Fehler beim Abrufen der Gruppen:", error);
      });
  }, [dispatch]);

  /// ‚ú® **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞**
  const createNewTest = useCallback(
    (data: Partial<Test>) => {
      dispatch(createTest(data))
        .unwrap()
        .catch((error) => {
          console.error("Fehler beim Erstellen des Tests:", error);
        });
    },
    [dispatch]
  );

  /// ‚ú® **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞**
  const updateExistingTest = useCallback(
    (testId: string, data: Partial<Test>) => {
      dispatch(updateTest({ testId, data }))
        .unwrap()
        .catch((error) => {
          console.error("Fehler beim Aktualisieren des Tests:", error);
        });
    },
    [dispatch]
  );

  /// ‚ùå **–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞**
  const deleteExistingTest = useCallback(
    (testId: string) => {
      dispatch(deleteTest(testId))
        .unwrap()
        .catch((error) => {
          console.error("Fehler beim L√∂schen des Tests:", error);
        });
    },
    [dispatch]
  );

  /// üìë **–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞**
  const copyExistingTest = useCallback(
    (testId: string) => {
      dispatch(copyTest(testId))
        .unwrap()
        .catch((error) => {
          console.error("Fehler beim Kopieren des Tests:", error);
        });
    },
    [dispatch]
  );

  /// üîÑ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø**
  const updateTestGroupAccess = useCallback(
    (testId: string, groupId: string, action: "add" | "remove") => {
      if (!testId || !groupId || !["add", "remove"].includes(action)) {
        console.warn("Ung√ºltige Parameter f√ºr updateTestGroupAccess:", {
          testId,
          groupId,
          action,
        });
        return;
      }

      dispatch(updateTestGroups({ testId, groupId, action }))
        .unwrap()
        .catch((error) => {
          console.error("Fehler beim Aktualisieren der Testgruppen:", error);
        });
    },
    [dispatch]
  );

  /// üéØ **–í—ã–±–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞**
  const setSelectedTest = useCallback(
    (test: Test | null) => {
      dispatch(setCurrentTest(test));
    },
    [dispatch]
  );

  return {
    tests,
    allGroups, // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã
    loading,
    error,
    currentTest,
    fetchAllTests,
    fetchGroups, // ‚úÖ –û—Ç–¥–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø
    createNewTest,
    updateExistingTest,
    deleteExistingTest,
    copyExistingTest,
    updateTestGroupAccess,
    setSelectedTest,
  };
};
