import { useEffect, useCallback } from "react";
import { useDispatch, useSelector } from "react-redux";
import {
  AppDispatch,
  RootState,
  fetchTests,
  fetchAllGroups,
  createTest,
  updateTest,
  deleteTest,
  copyTest,
  updateTestGroups,
  setCurrentTest,
  selectAllTests,
  selectTestsLoading,
  selectTestsError,
  selectCurrentTest,
  selectAvailableGroupsForTest,
  selectAllGroups,
} from "../redux";
import { Test } from "../types/reduxTypes";

export const useTests = () => {
  const dispatch = useDispatch<AppDispatch>();

  const tests = useSelector(selectAllTests);
  const currentTest = useSelector(selectCurrentTest);
  const loading = useSelector(selectTestsLoading);
  const error = useSelector(selectTestsError);
  const allGroups = useSelector(selectAllGroups);

  // ‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞
  const availableGroups = useSelector((state: RootState) =>
    selectAvailableGroupsForTest(state, currentTest?.id ?? "")
  );

  // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç—ã –∏ –≥—Ä—É–ø–ø—ã –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (tests.length === 0) {
      dispatch(fetchTests())
        .unwrap()
        .catch((error) =>
          console.error("‚ùå [useTests] Fehler beim Abrufen der Tests:", error)
        );
    }

    if (allGroups.length === 0) {
      dispatch(fetchAllGroups())
        .unwrap()
        .catch((error) =>
          console.error("‚ùå [useTests] Fehler beim Abrufen der Gruppen:", error)
        );
    }
  }, [dispatch, tests.length, allGroups.length]);

  // ‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤
  const fetchAllTests = useCallback(() => {
    dispatch(fetchTests())
      .unwrap()
      .catch((error) =>
        console.error("‚ùå [useTests] Fehler beim Abrufen der Tests:", error)
      );
  }, [dispatch]);

  // ‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –≥—Ä—É–ø–ø
  const fetchAllGroupsList = useCallback(() => {
    dispatch(fetchAllGroups())
      .unwrap()
      .catch((error) =>
        console.error("‚ùå [useTests] Fehler beim Abrufen der Gruppen:", error)
      );
  }, [dispatch]);

  const createNewTest = useCallback(
    (data: Partial<Test>) => {
      dispatch(createTest(data))
        .unwrap()
        .catch((error) =>
          console.error("‚ùå [useTests] Fehler beim Erstellen des Tests:", error)
        );
    },
    [dispatch]
  );

  const updateExistingTest = useCallback(
    (testId: string, data: Partial<Test>) => {
      dispatch(updateTest({ testId, data }))
        .unwrap()
        .catch((error) =>
          console.error(
            "‚ùå [useTests] Fehler beim Aktualisieren des Tests:",
            error
          )
        );
    },
    [dispatch]
  );

  const deleteExistingTest = useCallback(
    (testId: string) => {
      dispatch(deleteTest(testId))
        .unwrap()
        .catch((error) =>
          console.error("‚ùå [useTests] Fehler beim L√∂schen des Tests:", error)
        );
    },
    [dispatch]
  );

  const copyExistingTest = useCallback(
    (testId: string) => {
      dispatch(copyTest(testId))
        .unwrap()
        .catch((error) =>
          console.error("‚ùå [useTests] Fehler beim Kopieren des Tests:", error)
        );
    },
    [dispatch]
  );

  // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ–º `fetchTests()` –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø
  const updateTestGroupAccess = useCallback(
    async (testId: string, groupId: string, action: "add" | "remove") => {
      if (!testId || !groupId || !["add", "remove"].includes(action)) {
        console.warn("‚ö†Ô∏è Ung√ºltige Parameter f√ºr updateTestGroupAccess:", {
          testId,
          groupId,
          action,
        });
        return;
      }

      try {
        console.log(
          `üì° [useTests] Aktualisiere Gruppen f√ºr Test ${testId}, Aktion: ${action}`
        );

        await dispatch(updateTestGroups({ testId, groupId, action })).unwrap();

        console.log(
          `‚úÖ [useTests] Gruppen f√ºr Test ${testId} erfolgreich aktualisiert`
        );

        // üîπ **–§–∏–∫—Å:** –í–º–µ—Å—Ç–æ `fetchAllGroups()` –∑–∞–≥—Ä—É–∂–∞–µ–º `fetchTests()` –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        fetchAllTests();
      } catch (error) {
        console.error(
          "‚ùå [useTests] Fehler beim Aktualisieren der Gruppen:",
          error
        );
      }
    },
    [dispatch, fetchAllTests] // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º `fetchAllTests`
  );

  const setSelectedTest = useCallback(
    (test: Test | null) => {
      dispatch(setCurrentTest(test));
    },
    [dispatch]
  );

  return {
    tests,
    availableGroups,
    allGroups,
    loading,
    error,
    currentTest,
    fetchAllTests,
    fetchAllGroupsList,
    createNewTest,
    updateExistingTest,
    deleteExistingTest,
    copyExistingTest,
    updateTestGroupAccess,
    setSelectedTest,
  };
};
