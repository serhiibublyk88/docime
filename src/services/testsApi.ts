import axios from "axios";
import { createAsyncThunk } from "@reduxjs/toolkit";
import { Test } from "../types/reduxTypes";

const API_URL = "http://localhost:5000/api/tests";


/// ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
const handleApiError = (error: unknown): string => {
  if (error instanceof Error) {
    console.error("‚ùå [API Error]:", error.message);
    return error.message || "Fehler beim Abrufen der Tests";
  }
  return "Unbekannter Fehler beim Abrufen der Tests";
};



/// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
export const fetchTestsApi = async (): Promise<Test[]> => {
  try {
    console.log("üîÑ [API] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ—Å—Ç—ã...");
    const response = await axios.get<Test[]>(API_URL, {
      withCredentials: true,
    });

    console.log(`‚úÖ [API] –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${response.data.length}`);

    return response.data.map((test) => ({
      id: test.id, // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º `id`, —Ç–∞–∫ –∫–∞–∫ –º–∞–ø–ø–µ—Ä –Ω–∞ –±—ç–∫–µ —É–∂–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–ª `_id`
      title: test.title,
      description: test.description,
      author: test.author
        ? { id: test.author.id, username: test.author.username }
        : { id: "unknown", username: "unknown" },
      timeLimit: test.timeLimit ?? 0,
      availableForGroups:
        test.availableForGroups?.map((group: { id: string; name: string }) => ({
          id: group.id,
          name: group.name || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
        })) ?? [],
      questions:
        test.questions?.map((q: { id: string; text: string }) => ({
          id: q.id,
          text: q.text || "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞",
        })) ?? [],
      maximumMarks: test.maximumMarks ?? 0,
      status: test.status || "inactive",
      minimumScores: test.minimumScores || {},
      createdAt: test.createdAt || new Date().toISOString(),
    }));
  } catch (error) {
    console.error("‚ùå [API] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤:", error);
    throw new Error("Fehler beim Laden von Tests");
  }
};

/// ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
export const createTestApi = async (testData: Partial<Test>): Promise<Test> => {
  const response = await axios.post(API_URL, testData, {
    withCredentials: true,
  });

  return {
    id: response.data.test.id,
    title: response.data.test.title,
    description: response.data.test.description,
    author: {
      id: response.data.test.author.id,
      username: response.data.test.author.username,
    },
    timeLimit: response.data.test.timeLimit,
    availableForGroups: response.data.test.availableForGroups.map(
      (group: { id: string; name: string }) => ({
        id: group.id,
        name: group.name,
      })
    ),
    questions: response.data.test.questions.map(
      (q: { id: string; text: string }) => ({
        id: q.id,
        text: q.text,
      })
    ),
    maximumMarks: response.data.test.maximumMarks,
    status: response.data.test.status,
    minimumScores: response.data.test.minimumScores,
    createdAt: response.data.test.createdAt,
  };
};

/// ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
export const updateTestApi = async (
  testId: string,
  data: Partial<Test>
): Promise<Test> => {
  const response = await axios.put(`${API_URL}/${testId}`, data, {
    withCredentials: true,
  });

  return {
    id: response.data.test.id,
    title: response.data.test.title,
    description: response.data.test.description,
    author: {
      id: response.data.test.author.id,
      username: response.data.test.author.username,
    },
    timeLimit: response.data.test.timeLimit,
    availableForGroups: response.data.test.availableForGroups.map(
      (group: { id: string; name: string }) => ({
        id: group.id,
        name: group.name,
      })
    ),
    questions: response.data.test.questions.map(
      (q: { id: string; text: string }) => ({
        id: q.id,
        text: q.text,
      })
    ),
    maximumMarks: response.data.test.maximumMarks,
    status: response.data.test.status,
    minimumScores: response.data.test.minimumScores,
    createdAt: response.data.test.createdAt,
  };
};

/// ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
export const deleteTestApi = async (testId: string): Promise<string> => {
  await axios.delete(`${API_URL}/${testId}`, { withCredentials: true });
  return testId;
};

/// ‚úÖ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
export const copyTestApi = async (testId: string): Promise<Test> => {
  const response = await axios.post(
    `${API_URL}/${testId}/copy`,
    {},
    { withCredentials: true }
  );

  return {
    id: response.data.test.id,
    title: response.data.test.title,
    description: response.data.test.description,
    author: {
      id: response.data.test.author.id,
      username: response.data.test.author.username,
    },
    timeLimit: response.data.test.timeLimit,
    availableForGroups: response.data.test.availableForGroups.map(
      (group: { id: string; name: string }) => ({
        id: group.id,
        name: group.name,
      })
    ),
    questions: response.data.test.questions.map(
      (q: { id: string; text: string }) => ({
        id: q.id,
        text: q.text,
      })
    ),
    maximumMarks: response.data.test.maximumMarks,
    status: response.data.test.status,
    minimumScores: response.data.test.minimumScores,
    createdAt: response.data.test.createdAt,
  };
};


/// ‚úÖ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø —Ç–µ—Å—Ç–∞
export const fetchGroupsApi = async (testId: string) => {
  try {
    console.log(`üîÑ [API] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è —Ç–µ—Å—Ç–∞ ${testId}...`);
    const response = await axios.get(`${API_URL}/${testId}/available-groups`, {
      withCredentials: true,
    });

    console.log(`‚úÖ [API] –ü–æ–ª—É—á–µ–Ω—ã –≥—Ä—É–ø–ø—ã:`, response.data);

    return response.data.availableForGroups.map(
      (group: { id: string; name: string }) => ({
        id: group.id,
        name: group.name,
      })
    );
  } catch (error) {
    console.error("‚ùå [API] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø:", error);
    throw error;
  }
};

/// ‚úÖ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø —Å–∏—Å—Ç–µ–º—ã (–Ω–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞!)
export const fetchAllGroupsApi = async () => {
  try {
    console.log("üîÑ [API] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã...");
    const response = await axios.get("http://localhost:5000/api/groups", {
      withCredentials: true,
    });

    console.log("‚úÖ [API] –ü–æ–ª—É—á–µ–Ω—ã –≤—Å–µ –≥—Ä—É–ø–ø—ã:", response.data);

    return response.data.map((group: { id: string; name: string }) => ({
      id: group.id,
      name: group.name,
    }));
  } catch (error) {
    console.error("‚ùå [API] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –≥—Ä—É–ø–ø:", error);
    throw error;
  }
};

/// ‚úÖ THUNK –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –≥—Ä—É–ø–ø
export const fetchAllGroups = createAsyncThunk<
  { id: string; name: string }[],
  void,
  { rejectValue: string }
>("tests/fetchAllGroups", async (_, { rejectWithValue }) => {
  try {
    console.log("üì° [THUNK] –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã...");
    const groups = await fetchAllGroupsApi();
    console.log("‚úÖ [THUNK] –ó–∞–≥—Ä—É–∂–µ–Ω—ã –≤—Å–µ –≥—Ä—É–ø–ø—ã:", groups);
    return groups;
  } catch (error) {
    console.error("‚ùå [THUNK] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –≥—Ä—É–ø–ø:", error);
    return rejectWithValue(handleApiError(error));
  }
});



/// ‚úÖ API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø —Ç–µ—Å—Ç–∞

export const updateTestGroupsApi = async (
  testId: string,
  groupId: string,
  action: "add" | "remove"
) => {
  if (!testId || !groupId || !["add", "remove"].includes(action)) {
    console.warn("‚ö†Ô∏è [API] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è updateTestGroupsApi:", {
      testId,
      groupId,
      action,
    });
    throw new Error("Ung√ºltige Parameter f√ºr updateTestGroupsApi");
  }

  try {
    console.log(
      `üì° [API] –í—ã–∑–æ–≤ updateTestGroupsApi —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:`,
      JSON.stringify({ testId, groupId, action }, null, 2)
    );

    console.log(
      `üîÑ [API] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PATCH –∑–∞–ø—Ä–æ—Å: ${
        action === "add" ? "–î–æ–±–∞–≤–ª—è–µ–º" : "–£–¥–∞–ª—è–µ–º"
      } –≥—Ä—É–ø–ø—É ${groupId} –≤ —Ç–µ—Å—Ç–µ ${testId}...`
    );

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ ID –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    if (typeof testId !== "string" || typeof groupId !== "string") {
      console.error("‚ùå [API] –û—à–∏–±–∫–∞: testId –∏–ª–∏ groupId –Ω–µ —Å—Ç—Ä–æ–∫–∞!", {
        testId,
        groupId,
      });
      throw new Error("Ung√ºltiges Test- oder Gruppen-ID-Format!");
    }

    const response = await axios.patch(
      `${API_URL}/${testId}/available-groups`,
      { groupId, action },
      { withCredentials: true }
    );

    console.log(
      `‚úÖ [API] –ì—Ä—É–ø–ø—ã —Ç–µ—Å—Ç–∞ ${testId} –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –î–æ—Å—Ç—É–ø–Ω–æ: ${response.data.availableForGroups.length} –≥—Ä—É–ø–ø`
    );

    return {
      testId,
      availableForGroups: response.data.availableForGroups.map(
        (group: { id: string; name: string }) => ({
          id: group.id,
          name: group.name,
        })
      ),
    };
  } catch (error) {
    console.error(
      `‚ùå [API] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø –¥–ª—è —Ç–µ—Å—Ç–∞ ${testId}:`,
      error
    );

    if (axios.isAxiosError(error) && error.response?.data) {
      console.error("‚ùå [API] –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", error.response.data);
    }

    throw error;
  }
};


