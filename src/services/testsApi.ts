import axios from "axios";
import { Test } from "../types/reduxTypes";

const API_URL = "http://localhost:5000/api/tests";

/// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
export const fetchTestsApi = async (): Promise<Test[]> => {
  try {
    const response = await axios.get(API_URL, { withCredentials: true });
    return response.data;
  } catch {
    throw new Error("Fehler beim Laden von Tests");
  }
};

/// ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
export const createTestApi = async (testData: Partial<Test>): Promise<Test> => {
  const response = await axios.post(API_URL, testData, {
    withCredentials: true,
  });
  return response.data.test;
};

/// ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
export const updateTestApi = async (
  testId: string,
  data: Partial<Test>
): Promise<Test> => {
  const response = await axios.put(`${API_URL}/${testId}`, data, {
    withCredentials: true,
  });
  return response.data.test;
};

/// ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
export const deleteTestApi = async (testId: string): Promise<string> => {
  await axios.delete(`${API_URL}/${testId}`, { withCredentials: true });
  return testId;
};

/// ‚úÖ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
export const copyTestApi = async (testId: string): Promise<Test> => {
  const response = await axios.post(
    `${API_URL}/${testId}/copy`,
    {},
    { withCredentials: true }
  );
  return response.data.test;
};

/// ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø (—Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `id` + `name`)
export const updateTestGroupsApi = async (
  testId: string,
  groupId: string,
  action: "add" | "remove"
): Promise<{
  testId: string;
  availableForGroups: { id: string; name: string }[]; // ‚úÖ –¢–µ–ø–µ—Ä—å —Å—Ä–∞–∑—É —Å –∏–º–µ–Ω–∞–º–∏ –≥—Ä—É–ø–ø
}> => {
  try {
    const response = await axios.patch(
      `${API_URL}/${testId}/available-groups`,
      { groupId, action },
      { withCredentials: true }
    );

    console.log("üìå API Response:", response.data); // üî• –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞

    if (!response.data || !Array.isArray(response.data.availableForGroups)) {
      throw new Error(
        "Ung√ºltige API-Antwort: 'availableForGroups' fehlt oder ist ung√ºltig."
      );
    }

    return { testId, availableForGroups: response.data.availableForGroups };
  } catch (error) {
    console.error("Fehler bei der Aktualisierung der Gruppen:", error);
    throw error;
  }
};

/// ‚úÖ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø
export const fetchGroupsApi = async (): Promise<
  { id: string; name: string }[]
> => {
  try {
    const response = await axios.get("http://localhost:5000/api/groups", {
      withCredentials: true,
    });

    if (!response.data || !Array.isArray(response.data)) {
      throw new Error(
        "Ung√ºltige API-Antwort: 'groups' fehlt oder ist ung√ºltig."
      );
    }

    return response.data;
  } catch (error) {
    console.error("Fehler beim Abrufen der Gruppen:", error);
    throw error;
  }
};
