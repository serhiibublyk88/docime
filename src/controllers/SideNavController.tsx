import {
  SideNav,
  Header,
  GroupCreationModal,
  QuestionModal,
} from "../components";
import { useSideNav } from "../hooks";
import { Question } from "../types/reduxTypes";

// ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –¥–ª—è –ø—Ä–æ–ø—Å–æ–≤
interface SideNavControllerProps {
  onAddQuestion: (question: Omit<Question, "id">) => void;
}

// ‚úÖ –¢–µ–ø–µ—Ä—å `SideNavController` –ø—Ä–∏–Ω–∏–º–∞–µ—Ç `onAddQuestion`
export const SideNavController: React.FC<SideNavControllerProps> = ({
  onAddQuestion,
}) => {
  const sideNav = useSideNav(onAddQuestion); // ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º `onAddQuestion` –≤ `useSideNav`

  return (
    <>
      <Header
        onLeftMenuToggle={sideNav.setIsLeftMenuOpen}
        onRightMenuToggle={sideNav.setIsRightMenuOpen}
        shouldShowBurgers={sideNav.shouldShowBurgers}
        shouldShowRightBurger={sideNav.shouldShowRightBurger}
      />

      {sideNav.user && sideNav.isLeftMenuOpen && (
        <SideNav
          position="left"
          isOpen={sideNav.isLeftMenuOpen}
          onClose={sideNav.setIsLeftMenuOpen}
          items={sideNav.leftMenuItems}
        />
      )}

      {sideNav.user && sideNav.isRightMenuOpen && (
        <SideNav
          position="right"
          isOpen={sideNav.isRightMenuOpen}
          onClose={sideNav.setIsRightMenuOpen}
          items={sideNav.rightMenuItems}
        />
      )}

      {sideNav.user && sideNav.isGroupModalOpen && (
        <GroupCreationModal
          show={sideNav.isGroupModalOpen}
          onClose={() => sideNav.setIsGroupModalOpen(false)}
        />
      )}

      {/* üîπ –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥–∞–ª–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ */}
      {sideNav.openQuestionType && (
        <QuestionModal
          isOpen={!!sideNav.openQuestionType}
          onClose={() => sideNav.setOpenQuestionType(null)}
          onSave={sideNav.handleSaveQuestion} // ‚úÖ –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞—ë–º `handleSaveQuestion`
          type={sideNav.openQuestionType}
        />
      )}
    </>
  );
};
